[** DATABASE SQL **]

[** 데이터 베이스의 정의 **]
  [1] 데이터를 저장하는 객체 또는 관계들의 집합
  [2] 서로 다른 관계를 생성하기 위해 관계들에게 가해지는 일련의 연산자들의 집합
  
[1] SQL문장 (Query문)
  -원하는 결과를 얻기위해 DB에 요청하는 요청코드
  -SQL문장의 종류
    1)DML (Data Manipulation Language) : 데이터 조작어
      - SELECT, INSERT, UPDATE, DELETE
    2)DDL (Data Definition Language) : 데이터 정의어
      - CREATE, ALTER, DROP, RENAME등..
    3)DCL (Data Control Language) : 데이터 제어어
      - GRANT, REVOKE
  
  --------------------------------------------------------------------------------------------------
  
  [** 사원 테이블(employees) 행 **]
      EMPLOYEE_ID : 사번
      FIRST_NAME : 이름
      LAST_NAME : 성
      EMAIL : 메일주소
      PHONE_NUMBER : 전화번호
      HIRE_DATE : 입사일
      JOB_ID : 직종
      SALARY : 급여
      COMMISSION_PCT : 보너스
      MANAGER_ID : 상사번호
      DEPARTMENT_ID : 부서번호
  
   --------------------------------------------------------------------------------------------------
   
   -SELECT문 : DB의 자원들을 검색할때 사용하는 키워드이다.
    ex) SELECT * FROM 테이블명;   -- 테이블에 있는 모든행의 정보를 조회한다 (SELECT *)
    
      예제1) 사원 테이블(employees)에서 사번(employee_id), 이름(first_name), 직종(job_id)를 출력하시오.
             SELECT employee_id, first_name, job_id FROM employees;
             
      예제2) 사원테이블에서 사번, 이름, 직종, 급여, 보너스 그리고 보너스의 실제 금액을 계산하여 출력하시오.
             SELECT employee_id, first_name, job_id, salary, commision_pct 
             (commission_pct * salary) r_bonus
             FROM employees;
             
   --------------------------------------------------------------------------------------------------
   
   -WHERE(조건부여) : 테이블에서 자원들을 검색할 때 필요하며, 사용자가 원하는 자원들을 간단한 연산자 등을 통해
                     비교할 수 있도록 해주는 키워드( 즉 자바의 if와 비슷하다)
                     ex) WHERE salary >= 1000 (급여가 1000보다 크거나 같을때)
                     
   [*] not 사용
       : SELECT * FROM employees
         WHERE not department_id = 80; 
         (department_id 가 80이 아닐경우 )
                
      예제1) 사원테이블에서 직종이 'IT_PROG'인 사원들의 정보를 사번, 이름, 직종, 급여 순으로 출력 
             SELECT employee_id, first_name, job_id, salary FROM employees
             WHERE job_id = 'IT_PROG';
             
      예제2) 사원테이블에서 입사일이 2005년 9월 21일인 사원의 정보를 사번, 이름, 입사일 순으로 출력
             SELECT employee_id, first_name, hire_date FROM employees
             WEHRE hire_date = '09/21/2005';
             
      예제3) 사원테이블에서 입사일이 2005년도인 모든 사원의 정보를 사번, 이름, 입사일 순으로 출력
             SELECT employee_id, first_name, hire_date FROM employees
             WHERE hire_date >= '01/01/2005' and hire_date =< '12/31/2006'
             (사원 테이블의 hire_date는 mm/dd/yyyy순으로 되어있다.)
             
    --------------------------------------------------------------------------------------------------
     
     -SQL연산자
      1)BETWEEN연산자
        -A와 B사이의 값을 검색할 때 사용
        ex) WHERE hire_date BETWEEN '01/01/2005' and '01/01/2006'
        
      2)IN연산자
        -여러개의 조건을 목록화 한뒤 일치하는 조건을 검색
        -IN을 사용할경우 조건식을 짧게 줄일수 있다. 
         (ex) salary = 2200 or salary = 3200 -> salary IN(2200, 3200) )
        ex) WHERE salary IN(2200, 3200, 5000, 6800)
        
        예제1) 사원테이블에서 급여가 2200, 3200, 5000, 6800을 받는 사원들의 정보를 사번
               이름, 급여 순으로 출력
               SELECT employee_id, first_name, salary FROM employees
               WHERE salary IN(2200, 3200, 5000, 6800);
               
      3)LIKE연산자(유사검색)
        -지정한 문자형태와 완전히 일치하는 혹은 특정 문장을 포함하고 있는 자원을 검색
        - %(모든 값), _(하나의 값)
          ex) 'M%' : M으로 시작하는 모든값 
          ex) '%d' : d로 끝나는 모든값 
          ex) 'M___' : M으로 시작하는 전체길이 4글자의 값
          ex) '%a%' : 값 어디든 a가 포함되어 있는 값
          
        예제1) 사원테이블에서 이름이 M으로 시작하는 사원의 정보를 사번, 이름, 직종 순으로 출력
               SELECT employee_id, first_name, job_id FROM employees
               WHERE first_name LIKE 'M%';
               
        예제2) 사원테이블에서 이름이 7글자인 사원 중 첫글자가 M으로 시작하는 사원들을 검색
               SELECT first_name FROM employees
               WHERE first_name LIKE 'M______';
         
        예제3) 2004년도에 입사한 모든 사원들의 이름, 입사일을 출력
               SELECT first_name, hire_date FROM employees
               WHERE hire_date LIKE '%2004%';
               
        예제4) 사원테이블에서 이름에 세번째 글자에 a가 들어가는 사원의 사번, 이름을 출력
               SELECT employee_id, first_name FROM employees
               WHERE first_name LIKE '__a%';
        
       ---------------------------------------------------------------------------------------------------
        
        -ORDER BY(정렬)
          :SQL로 검색된 행들을 정렬하고자 할 때 사용
           DESC(내림차순) / ASC(오름차순)
                  
        예제1) 사원테이블에서 급여를 많이 받는 순으로 사번, 이름, 급여, 입사일 순으로 출력
               단, 급여가 같을경우 입사일이 빠른순으로 출력
               SELECT employee_id, first_name, salary, hire_date 
               FROM employees
               ORDER BY salary desc, hire_date asc;
       
        예제2) 급여가 15000달러 이상인 사원들의 모든 정보를 입사일이 빠른순으로 조회
               SELECT * FROM employees
               WHERE salary >= 15000
               ORDER BY hire_date asc;
        
        예제3) 사원 테이블에서 사번, 이름, 입사일, 부서번호, 직종, 급여순으로 출력하되 부서번호가 빠른순,
               부서번호가 같다면 직종 빠른순, 직종까지 같다면 급여를 많이받는 순으로 정렬.
               SELECT employee_id, first_name, hire_date, department_id, job_id, salary 
               FROM employees
               ORDER BY department_id asc, job_id , salary desc;
        
        예제4) 사원테이블에서 직종이 ST_CLERK이 아닌 사원들의 사번, 이름, 급여를 출력 하되,
               직종 내림차순으로 정렬하시오.
               SELECT employee_id, first_name, salary 
               FROM employees
               WHERE not job_id = 'ST_CLERK'
               ORDER BY job_id desc;

        예제5) 사원테이블에서 이름에 소문자 s가 들어가지 않는 사원의 사번과 이름을 사번이 낮은순으로 출력.
               SELECT employee_id, first_name
               FROM employees
               WHERE first_name LIKE '%s%'
               ORDER BY employee_id asc;
           
       ---------------------------------------------------------------------------------------------------
       
       [**SQL 함수**]
         [*] SQL함수의 특징과 단점
             - 자원에 대한 연산을 수행할수 있다.
             - 개벼적인 데이터 항목을 수행할수 있다.
         
         [1] 문자함수
             1)LOWER : 알파벳 값을 소문자로 변환
              ex) SELECT LOWER('ABC') FROM dual;  -> abc
             2)UPPER : 알파벳 값을 대문자로 변환        
              ex) SELECT UPER('abc') FROM dual;   -> ABC
             3)INITCAP : 알파벳 첫 글자만 대문자로 변환
              ex) SELECT INITCAP('abc') FROM dual; -> Abc
              
              예제1) 사원테이블에서 'michael'로 검색하여 검색된 사원의 사번, 이름을 출력 하시오.
                     
                     SELECT employee_id, first_name FROM employees
                     WHERE LOWER(first_name) = LOWER('michael');  -- 똑같은 문자함수를 양항에 넣어준다.
      
         [2] 조작함수
         
              1)LENGTH : 문자열의 길이
               ex) SELECT LENGTH('abcdefg') FROM dual; -- 글자수인 7이 나온다.
              2)REPLACE : 특정 문장의 일부를 원하는 값으로 변경
               ex) SELECT REPLACE('good morning john', 'morning', 'evening') FROM dual; -- good evening john으로 출력된다
              3)CONCAT : 문장을 연결하는 함수
               ex) SELECT CONCAT (first_name, last_name) full_name FROM employees;  -- 성과 이름을 합쳐서 출력한다
              
              예제1) 사원테이블에서 부서번호가 50번인 사원들의 사번, 이름, 직종을 출력하되 이름에
                    'el'이 들어간 사람들은 모두 'el'대신 '**'로 변경하여 출력
                    
                    SELECT employee_id, REPLACE(first_name, 'el', '**'), job_id 
                    FROM employees
                    WHERE department_id = 50;
              
              예제2) 사원테이블에서 모든 사원의 이름과 성을 붙여서 full_name 이라는 컬럼으로 출력
                    
                    SELECT CONCAT(first_name, last_name) fullname FROM employees;
                  (or CONCAT을 사용하지 않는경우)
                    SELECT fisrt_name || last_name AS full_name FROM employees;
                    
         [3] 숫자함수
             
             1) ROUND : 지정된 소수점 자리수에서 반올림
                ex) SELECT ROUND(456.789, 2) FROM dual; -- 456.79
             2) TRUNC : 지정된 소수점 자리 아래로 버림
                ex) SELECT TRUNC(456.789, 2) FROM dual; -- 456.78
             3) MOD : 나머지 값  (JAVA의 % 같은 함수)
                ex)SELECT MOD( 7, 4) FROM dual; -- 3
                
             예제1) 사번이 짝수인 사원들의 모든정보를 출력
                    
                    SELECT * FROM employees
                    WHERE MOD(employee_id, 2) = 0;
                    
         [4] 날짜 함수(sysdate)
             ex) SELECT sysdate FROM dual;
             
             1) MONTHS_BETWEEN : 두 날짜 사이의 개월 수
                ex) SELECT sysdate, hire_date, MONTHS_BETWEEN(sysdate, hire_date) mon FROM employees;
             2) ADD_MONTHS : 특정 날짜에 개월 수를 더한다
                ex) SELECT sysdate, ADD_MONTHS(sysdate, 2) FROM dual;
             
             예제1) 사번이 120번인 사원이 입사후 3년 6개월째 되는 날 퇴사를 하려고한다, 퇴사날짜를 구하시오.
             
                    SELECT employee_id, hire_date, ADD_MONTHS(hire_date, 42) d_day
                    FROM employees
                    WHERE employee_id = 120;
                
          [5] 데이터 형변환
          
              - 암시적 형변환 
                ('123'과 같이 숫자가 문자 형태로 되어있는 자원들은 알아서 저수 자료형에 변환되어 저장된다.)
              - 명시적 형변환
                (SQL문장 안에서 함수를 사용하여 원하는 포맷 형식으로 변경하는 것)
                ex) SELCT TO_CHAR(hire_date, 'yy-mm-dd day') FROM dual;
                  (hh12 : 12시간기준 / hh 24: 24시간 기준 / mi : 분(0~59) / ss: 초)
                  
         ---------------------------------------------------------------------------------------------------
         
         [** 그룹 함수 **]
            -일반적으로 그룹함수는 일반 함수랑 같이 사용이 불가능하다
            -여러행 또는 테이블 전체에 대하여 함수를 적용한 뒤, 하나의 결과를 가져오도록 하는 함수
            
              1) AVG() : 평균값을 구하는 함수
              2) COUNT() : 행의 갯수를 반환하는 함수
              3) MAX() : 최대값을 구하는 함수
              4) MIN() : 최소값을 구하는 함수
              5) SUM() : 총 합을 구하는 함수
            
            예제1) 사원 테이블에서 부서에 속해있는 사원의 수를 구하기
                   SELECT COUNT(department_id) FROM employees;
                   
            예제2) 회사에 재직중인 모든 사원의 수를 구하기
                   SELECT COUNT(*) FROM employees;
                   
            예제3) 사원중 보너스를 받는 사원의 수를 출력
                   SELECT COUNT(commission_pct) FROM employees;
                   
            예제4) 사원테이블에서 직종이 SA_REP인 사원들의 평균 급여와 급여 최고액, 급여 최저액, 급여의 총합을 출력.
                   SELECT AVG(salary), MAX(salary), MIN(salary), SUM(salary)
                   FROM employees
                   WHERE job_id = 'SA_REP';
                   
            예쩨5) 사원테이블에서 부서번호가 50번인 사원들의 최대급여와 최소급여를 출력하시오
                   SELECT MAX(salary), MIN(salary)
                   FROM employees
                   WHERE department_id = 50;
                   
         [1] 그룹화(GROUP BY)
             -특정 테이블에서 소그룹을 마늘어 결과를 소그룹별로 나눠서 얻어내고자 할 때 사용
              ex) SELECT job_id, COUNT(*) FROM employees GROUP BY job_id;
                  (job_id를 그룹화한후 각 직종별 인원수를 구하는 문항)
                  
              예제1) 각 부서별로 급여의 평균을 조회
                     SELECT department_id, AVG(salary) FROM employees
                     GROUP BY department_id;
                     
              예제2) 각 직종별 급여의 평균을 조회
                     SELECT job_id, AVG(salary) FROM employees
                     GROUP BY job_id;
                     
              예제3) 부서, 직종으로 그룹화 한뒤 직종별 급여의 합을 출력하되, 부서번호가 높은순으로 출력
                     SELECT department_id, job_id, SUM(salary) FROM employees
                     GROUP BY department_id, job_id
                     ORDER BY department_id desc;
                     
              예제4) 각 부서별 급여의 합계와 부서별 사원수, 부서별 평균급여를 화면에 출력하되
                     최대급여가 높은순으로 정렬하시오.
                     SELECT department_id, SUM(salary), COUNT(*), AVG(salary)
                     FROM employees
                     GROUP BY department_id
                     ORDER BY SUM(salary) desc;
                     
              예제5) 부서, 급여를 기준으로 그룹화 한 뒤, 급여가 5000이상인 결과만 부서번호, 급여, 인원수
                     순으로 출력
                     SELECT department_id, salary, COUNT(*)
                     FROM employees
                     GROUP BY department_id, salary;
               
              예제6) 부서, 직종별 그룹화 후 결과를 부서번호, 직종, 인원수 순으로 조회
                     단, 직종이 'MAN'으로 끝나는 경우만 검색하여 출력
                     SELECT department_id, job_id, COUNT(*)
                     FROM employees
                     WHERE job_id LIKE '%MAN'
                     GROUP BY department_id, job_id;
                    
         [2] 그룹함수의 조건식
