[** DATABASE SQL **]

[** 데이터 베이스의 정의 **]
  [1] 데이터를 저장하는 객체 또는 관계들의 집합
  [2] 서로 다른 관계를 생성하기 위해 관계들에게 가해지는 일련의 연산자들의 집합
  
[1] SQL문장 (Query문)
  -원하는 결과를 얻기위해 DB에 요청하는 요청코드
  -SQL문장의 종류
    1)DML (Data Manipulation Language) : 데이터 조작어
      - SELECT, INSERT, UPDATE, DELETE
    2)DDL (Data Definition Language) : 데이터 정의어
      - CREATE, ALTER, DROP, RENAME등..
    3)DCL (Data Control Language) : 데이터 제어어
      - GRANT, REVOKE
  
  --------------------------------------------------------------------------------------------------
  
  [** 사원 테이블(employees) 행 **]
      EMPLOYEE_ID : 사번
      FIRST_NAME : 이름
      LAST_NAME : 성
      EMAIL : 메일주소
      PHONE_NUMBER : 전화번호
      HIRE_DATE : 입사일
      JOB_ID : 직종
      SALARY : 급여
      COMMISSION_PCT : 보너스
      MANAGER_ID : 상사번호
      DEPARTMENT_ID : 부서번호
  
   --------------------------------------------------------------------------------------------------
   
   -SELECT문 : DB의 자원들을 검색할때 사용하는 키워드이다.
    ex) SELECT * FROM 테이블명;   -- 테이블에 있는 모든행의 정보를 조회한다 (SELECT *)
    
      예제1) 사원 테이블(employees)에서 사번(employee_id), 이름(first_name), 직종(job_id)를 출력하시오.
             SELECT employee_id, first_name, job_id FROM employees;
             
      예제2) 사원테이블에서 사번, 이름, 직종, 급여, 보너스 그리고 보너스의 실제 금액을 계산하여 출력하시오.
             SELECT employee_id, first_name, job_id, salary, commision_pct 
             (commission_pct * salary) r_bonus
             FROM employees;
             
   --------------------------------------------------------------------------------------------------
   
   -WHERE(조건부여) : 테이블에서 자원들을 검색할 때 필요하며, 사용자가 원하는 자원들을 간단한 연산자 등을 통해
                     비교할 수 있도록 해주는 키워드( 즉 자바의 if와 비슷하다)
                     ex) WHERE salary >= 1000 (급여가 1000보다 크거나 같을때)
                
      예제1) 사원테이블에서 직종이 'IT_PROG'인 사원들의 정보를 사번, 이름, 직종, 급여 순으로 출력 
             SELECT employee_id, first_name, job_id, salary FROM employees
             WHERE job_id = 'IT_PROG';
             
      예제2) 사원테이블에서 입사일이 2005년 9월 21일인 사원의 정보를 사번, 이름, 입사일 순으로 출력
             SELECT employee_id, first_name, hire_date FROM employees
             WEHRE hire_date = '09/21/2005';
             
      예제3) 사원테이블에서 입사일이 2005년도인 모든 사원의 정보를 사번, 이름, 입사일 순으로 출력
             SELECT employee_id, first_name, hire_date FROM employees
             WHERE hire_date >= '01/01/2005' and hire_date =< '12/31/2006'
             (사원 테이블의 hire_date는 mm/dd/yyyy순으로 되어있다.)
             
    --------------------------------------------------------------------------------------------------
     
     -SQL연산자
      1)BETWEEN연산자
        -A와 B사이의 값을 검색할 때 사용
        ex) WHERE hire_date BETWEEN '01/01/2005' and '01/01/2006'
        
      2)IN연산자
        -여러개의 조건을 목록화 한뒤 일치하는 조건을 검색
        -IN을 사용할경우 조건식을 짧게 줄일수 있다. 
         (ex) salary = 2200 or salary = 3200 -> salary IN(2200, 3200) )
        ex) WHERE salary IN(2200, 3200, 5000, 6800)
        
        예제1) 사원테이블에서 급여가 2200, 3200, 5000, 6800을 받는 사원들의 정보를 사번
               이름, 급여 순으로 출력
               SELECT employee_id, first_name, salary FROM employees
               WHERE salary IN(2200, 3200, 5000, 6800);
               
      3)LIKE연산자(유사검색)
        -지정한 문자형태와 완전히 일치하는 혹은 특정 문장을 포함하고 있는 자원을 검색
        - %(모든 값), _(하나의 값)
          ex) 'M%' : M으로 시작하는 모든값 
          ex) '%d' : d로 끝나는 모든값 
          ex) 'M___' : M으로 시작하는 전체길이 4글자의 값
          ex) '%a%' : 값 어디든 a가 포함되어 있는 값
          
        예제1) 사원테이블에서 이름이 M으로 시작하는 사원의 정보를 사번, 이름, 직종 순으로 출력
               SELECT employee_id, first_name, job_id FROM employees
               WHERE first_name LIKE 'M%';
               
        예제2) 사원테이블에서 이름이 7글자인 사원 중 첫글자가 M으로 시작하는 사원들을 검색
               SELECT first_name FROM employees
               WHERE first_name LIKE 'M______';
         
        예제3) 2004년도에 입사한 모든 사원들의 이름, 입사일을 출력
               SELECT first_name, hire_date FROM employees
               WHERE hire_date LIKE '%2004%';
               
        예제4) 사원테이블에서 이름에 세번째 글자에 a가 들어가는 사원의 사번, 이름을 출력
               SELECT employee_id, first_name FROM employees
               WHERE first_name LIKE '__a%';
        
       ---------------------------------------------------------------------------------------------------
        
        -ORDER BY(정렬)
          
  
   
   
      
