  [** MYSQL **]
    
    [테이블 생성법]
    ex) CREATE TABL test(
          id VARCHAR2(20) primary key,
          pwd NUMBER(5),
          name VARCHAR2(50)
          addr VARCHAR2(50),
          email VRACHAR2(100)
        );
    
    
    -------------------------------------------------------------------
    
    [**키의 종류**]
      1) 기본키(primary key)
         -고유한 식별자로써, 속성의 중복을 방지하기 위한 키워드 
          예) id VARCHAR2(20) primary key - > 같은 아이디를 입력시 가입이 불가능하다
          
      2) 후보키(candidate key)
         -id, pwd, name 과 같이 기본키가 될 자격이 있는 나머지 컬럼들
          (즉 , Column Name 에 속해 있는것들)
           
      3) 외래키(foregin key)
         -한 테이블에 속성이 다른 테이블의 기본키가 되는 것.
         
    -------------------------------------------------------------------
     
     1) JOIN : 테이블과 테이블간의 연결성을 의미
     
      ex) 각 부서가 위치한 도시를 출력
          (locations 테이블의 location_id와 departments 테이블의 location_id가 일치하는 지역을 검색하여 출력)
          -> SELECT d.department_id, d.department_name, l.city        -- 별칭.후보키를 참조한다 라는 코드.
            FROM departments d, locations l             -- departments d 같이 참조할 별칭을 지정해 줘야한다.
            WHERE d.location_id = l.location_id;
            
      예제1) 사원테이블과 부서(departments)테이블 로부터 이름, 부서번호(department_id), 부서이름(department_name)을
             출력하되 사원테이블과 부서테이블의 부서번호가 같은 경우만 출력.
             
             SELECT e.first_name, d.department_id, d.department_name
             FROM employees e, departments d
             WHERE d.department_id = e.department_id;

      예제2) 부서테이블과 지역(locations)로 부터 부서이름, 도시를 출력하되 부서와 지역 테이블의 location_id가
             같은 경우에만 출력.
             
             SELECT d.department_name, l.city
             FROM departments d, locations l
             WHERE d.location_id = l.location_id;
             
      예제3) Sydney     Austraillia
             Tokyo      Jan
             locations 테이블과 countries 테이블을 통해 도시명과 해당 도시가 위치하는 국가명을 조회.
             
             SELECT l.city, c.country_name 
             FROM locations l, countries c
             WHERE l.country_id = c.country_id;

      예제4) 사번, 이름, 직종, 급여, 부서명, 도시명 순으로 출력
             단, 직종이 IT_PROG인 사원들만 출력
             
             SELECT e.employee_id, e.first_name, e.job_id, e.salary, d.department_name, l.city
             FROM employees e, departments d, locations l
             WHERE e.job_id = 'IT_PROG' and e.department_id = d.department_id and d.location_id = l.location_id;
            (3개의 테이블의 값이 일치할경우(조건 3개비교) 출력)

      예제5) 사원, 부서, 지역 테이블로부터 first_name, last_name, email, department_id, department_name
             location_id, city 정보를 출력하되, city가 'Seattle'인 경우의 결과를 보여주시오
             
             SELECT e.first_name, e.last_name, e.email, d.department_id, d.department_name, l.location_id, l.city
             FROM employees e, departments d, locations l
             WHERE l.city = 'Seattle' and
             d.department_id = e.department_id and
             l.location_id = d.location_id;
             
       -------------------------------------------------------------------
       
      2) view(가상의 테이블)
         -원본 테이블에는 존재하지 않는 데이터를 추가하거나 삭제하여 조회 전용으로 사용하는 테이블
          ex) 사원테이블로부터 view를 생성하기
              CREATE or replace view
              TEST_EMP( empno, hire, job ) AS
              SELECT employee_id, hire_date, job_id
              FROM employees;
              
          예제1) job_id가 'ST_CLERK'인 데이터만 검색하는 view를 만들어보자
                CREATE OR REPLACE view
                JOB_VIEW (empno, name, job) AS
                SELECT employee_id, first_name, job_id
                FROM employees
                WHERE job_id = 'ST_CLERK';
            
          예제2) 이름이 'Micheal'인 사원의 정보만 출력하는 view 
                 CREATE OR REPLACE view
                 Michael AS
                 SELECT * FROM employees
                 WHERE first_name = 'Michael';
              
          예제3) 사원의 이름, 급여, 급여+10,000를 출력하는 view를 생성하자
                 CREATE OR REPLACE view
                 Salary_view AS
                 SELECT first_name, salary, (salary+10000) r_salary
                 FROM employees;
         
         
         
         
         
